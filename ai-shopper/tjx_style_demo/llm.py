import os, json, random
from typing import List, Dict
from .quiz import Quiz

def _stub_outfit(quiz: Quiz, items: List[Dict]) -> str:
    """
    Deterministic, offline 'LLM' that picks up to 4 items under budget
    and returns a nice Markdown block with a total. Works without OpenAI.
    """
    items = [i for i in items if i.get("price")]
    items.sort(key=lambda x: x["price"])

    pick, total = [], 0.0
    for it in items:
        if total + it["price"] <= quiz.budget and len(pick) < 4:
            pick.append(it)
            total += it["price"]

    lines = [
        f"### Outfit for {quiz.season} / {quiz.vibe} / {quiz.palette} (≤ ${quiz.budget:.2f})",
        "",
        "Selected:"
    ]
    for it in pick:
        name = it.get("name","")
        url  = it.get("url","#")
        price = it.get("price",0.0)
        lines.append(f"- [{name}]({url}) — ${price:.2f}")

    lines += [
        "",
        f"**Estimated total:** ${total:.2f}",
        "",
        "_(Generated by stub recommender — set `OPENAI_API_KEY` to use OpenAI)_"
    ]
    return "\n".join(lines)

def compose_outfit(quiz: Quiz, items: List[Dict]) -> str:
    """
    Uses OpenAI if OPENAI_API_KEY is set; otherwise falls back to the stub.
    """
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return _stub_outfit(quiz, items)

    try:
        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        sys = ("You are a retail stylist for T.J. Maxx. Build a cohesive outfit from the provided real products. "
               "Stay under the user's budget. Prefer 2–4 items. Return valid Markdown with a short rationale.")
        user = {"quiz": quiz.model_dump(), "catalog_sample": items}
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":sys},
                      {"role":"user","content":json.dumps(user)}],
            temperature=0.5,
            max_tokens=600,
        )
        return resp.choices[0].message.content
    except Exception:
        return _stub_outfit(quiz, items)

def prefilter(catalog: List[Dict], quiz: Quiz, limit: int = 18) -> List[Dict]:
    """
    Light filtering so we only pass a small, relevant slice to the 'LLM'.
    """
    pool = [c for c in catalog if c.get("price") and c["price"] > 0]
    if quiz.season in ("winter","fall"):
        pool = [p for p in pool if not any(w in (p.get("name","").lower()) for w in ("swim","bikini"))]
    if quiz.palette == "neutrals":
        neut = [p for p in pool if any(k in (p.get("name","").lower()) for k in ("black","white","cream","beige","tan","grey","gray"))]
        pool = neut or pool
    random.shuffle(pool)
    return pool[:limit]
